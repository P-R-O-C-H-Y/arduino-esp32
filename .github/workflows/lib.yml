name: Compile External Libraries - ESP32

# The workflow will run on every push and pull request to the repository
on:
  push:
  #pull_request:
env:
  # It's convenient to set variables for values used multiple times in the workflow
  SKETCHES_REPORTS_PATH: libraries-report
  SKETCHES_REPORTS_ARTIFACT_NAME: libraries-report
jobs:
  compile-sketch:
    runs-on: ubuntu-latest

    env:
      # libraries to install for all boards
      UNIVERSAL_LIBRARIES: |
        # Install the libraries
        - source-path: ./
        - name: Adafruit NeoPixel
        - name: FastLED
        - name: IRremote
        - name: ESP32Servo


        # Libs with no compilable example found
        # - name: Blynk 

      UNIVERSAL_SKETCHES: 
        # List of sketches to build (1 for each library)
        ~/Arduino/libraries/Adafruit_NeoPixel/examples/strandtest/strandtest.ino
        ~/Arduino/libraries/FastLED/examples/Blink/Blink.ino
        ~/Arduino/libraries/IRremote/examples/SendDemo/SendDemo.ino
        ~/Arduino/libraries/ESP32Servo/examples/Knob/Knob.ino

    strategy:
      matrix:
        fqbn:
          - esp32:esp32:esp32
          - esp32:esp32:esp32s2
          - esp32:esp32:esp32c3
          - esp32:esp32:esp32s3

        # compile only the examples compatible with each board
        #include:
          #- board:
          #    fqbn: esp32:esp32:esp32
          #  additional-libraries: |
          #    - name: IRremote
          #  additional-sketch-paths: |
          #    - /home/runner/Arduino/libraries/IRremote/examples/SendDemo/SendDemo.ino
          #- board:
          #    fqbn: esp32:esp32:esp32s2
          #  additional-libraries: |
          #    - name: lvgl
          #  additional-sketch-paths: |
          #    - libraries/doom
          #    fqbn: esp32:esp32:esp32c3
          #- board:
          #  additional-libraries: |
          #    - name: ArduinoBLE
          #  additional-sketch-paths: |
          #    - ~/Arduino/libraries/ArduinoBLE
          #- board:
          #    fqbn: esp32:esp32:esp32s3
          #  additional-libraries: |
          #    - name: ArduinoBLE
          #    - name: STM32duino LSM6DSOX
          #  additional-sketch-paths: |
          #    - ~/Arduino/libraries/WiFiNINA
          #    - ~/Arduino/libraries/ArduinoBLE

    steps:
      # This step makes the contents of the repository available to the workflow
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Arduino ESP32 core
      - name: Install Arduino ESP32 core
        run: |
           bash .github/scripts/install-arduino-core-esp32.sh

      # For more information: https://github.com/arduino/compile-sketches#readme
      - name: Compile sketch
        uses: P-R-O-C-H-Y/compile-sketches@main
        with:
          platforms: |
            - source-path: '.'
              name: "esp32:esp32"
          fqbn: ${{ matrix.fqbn }}
          libraries: |
            ${{ env.UNIVERSAL_LIBRARIES }}
          sketch-paths: |
            ${{ env.UNIVERSAL_SKETCHES }}
          enable-deltas-report: true
          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
          enable-warnings-report: true
          cli-compile-flags: |
            - --warnings="all"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

  report comment:
    needs: compile-sketch  # Wait for the compile job to finish to get the data for the report
    # if: github.event_name == 'schedule' # to be set later
    if: github.event_name == 'pull_request' # Only run the job when the workflow is triggered by a pull request
    runs-on: ubuntu-latest
    steps:
      # This step is needed to get the size data produced by the compile jobs
      - name: Download sketches reports artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

      - name: Report results
        uses: P-R-O-C-H-Y/report-size-deltas@main
        with:
          sketches-reports-source: ${{ env.SKETCHES_REPORTS_PATH }}

  report to file:
    needs: compile-sketch  # Wait for the compile job to finish to get the data for the report
    # if: github.event_name == 'schedule' # to be set later
    if: github.event_name == 'push' # Only run the job when the workflow is triggered by a push
    runs-on: ubuntu-latest
    steps:
      # This step is needed to get the size data produced by the compile jobs
      - name: Download sketches reports artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

      - name: Report results
        uses: P-R-O-C-H-Y/report-size-deltas@main
        with:
          sketches-reports-source: ${{ env.SKETCHES_REPORTS_PATH }}
          destination-file: LIBRARY_TEST.md

      - name: Checkout repository    
        uses: actions/checkout@v3
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "generated"
          git push

