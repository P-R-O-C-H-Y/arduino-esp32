name: Compile External Libraries - ESP32

# The workflow will run on every push and pull request to the repository
on:
  push:
  pull_request:
env:
  # It's convenient to set variables for values used multiple times in the workflow
  SKETCHES_REPORTS_PATH: libraries-report
  SKETCHES_REPORTS_ARTIFACT_NAME: libraties-report
jobs:
  compile-sketch:
    runs-on: ubuntu-latest

    env:
      # libraries to install for all boards
      UNIVERSAL_LIBRARIES: |
        # Install the libraries
        - source-path: ./
        - name: Blynk
        - name: FastLED
      # - name: ArduinoMqttClient

    strategy:
      matrix:
        fqbn:
          - esp32:esp32:esp32
          # - espressif:esp32:esp32s2
          # - espressif:esp32:esp32c3
          # - espressif:esp32:esp32s3
    steps:
      # This step makes the contents of the repository available to the workflow
      # Is this needed? 2 options - manual install from github(then needed) or auto install Board manager(release - not needed)
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Arduino ESP32 core
        run: |
           bash .github/scripts/install-arduino-core-esp32.sh

      # For more information: https://github.com/arduino/compile-sketches#readme
      - name: Compile sketch
        uses: arduino/compile-sketches@v1.0.1
        with:
          platforms: |
            # - source-url: 'https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json'
            # - source-url: 'https://github.com/espressif/arduino-esp32.git'
            # - source-path: '/home/runner/Arduino/hardware/espressif/esp32'
            - source-path: '.'
              name: "esp32:esp32"
          fqbn: ${{ matrix.fqbn }}
          libraries: |
            # The "blink" sketch being compiled in this demo doesn't use any libraries, so just use an empty list
            - ${{ env.UNIVERSAL_LIBRARIES }}
          sketch-paths: |
            # Configure the action to search all folders under the root of the repository for sketches and compile them.
            # This is formatted as a YAML list, which makes it possible to have multiple sketch paths if needed.
            # - libraries/Blynk/examples/Boards_WiFi/ESP32_WiFi/ESP32_WiFi.ino
            - libraries/ESP32/examples/GPIO/BlinkRGB/BlinkRGB.ino
            - /home/runner/Arduino/libraries/Blynk/examples/Boards_WiFi/ESP32_WiFi/ESP32_WiFi.ino
            - /home/runner/Arduino/libraries/FastLED/examples/Blink/Blink.ino
          enable-deltas-report: true
          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
          enable-warnings-report: true
          cli-compile-flags: |
            - --warnings="none"

      - name: Upload artifact
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

  report:
    needs: compile-sketch  # Wait for the compile job to finish to get the data for the report
    if: github.event_name == 'pull_request' # Only run the job when the workflow is triggered by a pull request
    runs-on: ubuntu-latest
    steps:
      # This step is needed to get the size data produced by the compile jobs
      - name: Download sketches reports artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

      - name: Report deltas
      - uses: arduino/report-size-deltas@v1
        with:
          sketches-reports-source: ${{ env.SKETCHES_REPORTS_PATH }}

