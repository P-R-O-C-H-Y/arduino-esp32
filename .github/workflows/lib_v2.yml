name: External Libraries Test V2

# The workflow will run on schedule and labeled pull requests
on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]

  # Schedule weekly builds on every Sunday at 4 am
  schedule:
    - cron: '0 4 * * SUN' 

  push:
env:
  # It's convenient to set variables for values used multiple times in the workflow
  SKETCHES_REPORTS_PATH: libraries-report
  SKETCHES_REPORTS_ARTIFACT_NAME: libraries-report
  RESULT_LIBRARY_TEST_FILE: LIBRARIES_TEST.md
jobs:
  compile-sketch:
    #if: |
    #  contains(github.event.pull_request.labels.*.name, 'lib_test') ||
    #  (github.event_name == 'schedule' && github.repository == 'espressif/arduino-esp32')
    
    runs-on: ubuntu-latest

    env:
      # How should be the ESP32 Arduino core installed
      BOARD_MANAGER: |
        - name: "esp32:esp32"
          source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          version: 2.0.3

      REPOSITORY: |
        - source-path: '.'
          name: "esp32:esp32"

      GITHUB_URL: |
        - name: "esp32:esp32"
          source-url: "espressif/arduino-esp32.git"
          version: 2.0.7

    strategy:
      matrix:
        target:
          - esp32
          - esp32s2
          - esp32c3
          - esp32s3

        include:
          - target: esp32
            fqbn: esp32:esp32:esp32
          - target: esp32s2
            fqbn: esp32:esp32:esp32s2
          - target: esp32c3
            fqbn: esp32:esp32:esp32c3
          - target: esp32s3
            fqbn: esp32:esp32:esp32s3


    steps:
      # This step makes the contents of the repository available to the workflow
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/lib.json'
          prefix: test
          masked: true

      - name: Show output
        run: echo "The time was ${{ env.test_library }}, ${{ env.test_sketches_0_name }}"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install jsonschema json

    - name: Load JSON file to variable
      id: load-json
      run: echo "::set-output name=json::$(cat .github/workflows/lib.json)"

    - name: Parse JSON and set environment variables
      run: |
        import json
        data = json.loads('${{ steps.load-json.outputs.json }}')

        for item in data:
          library = item['library']
          exclude_targets = item['exclude_targets']
          sketches = item['sketches']
          name = sketches[0]['name']
          path = sketches[0]['path']

          # Set environment variables for each item
          env_var_library = f'{library.replace(" ", "_").upper()}_LIBRARY'
          env_var_exclude_targets = f'{library.replace(" ", "_").upper()}_EXCLUDE_TARGETS'
          env_var_sketch_name = f'{library.replace(" ", "_").upper()}_SKETCH_NAME'
          env_var_sketch_path = f'{library.replace(" ", "_").upper()}_SKETCH_PATH'

          env_var_library_value = f'{library}'
          env_var_exclude_targets_value = f'{exclude_targets}'
          env_var_sketch_name_value = f'{sketch_name}
          env_var_sketch_path_value = f'{sketch_path}

          echo ${{ env.env_var_library_value }}
          echo ${{ env.env_var_exclude_targets_value }}
          echo ${{ env.env_var_sketch_name_value }}
          echo ${{ env.env_var_sketch_path_value }}


      # Install Arduino ESP32 core -> move to compile-sketch
      #- name: Install Arduino ESP32 core
      #  run: |
      #     bash .github/scripts/install-arduino-core-esp32.sh

      # For more information: https://github.com/arduino/compile-sketches#readme
      - name: Compile sketch
        uses: P-R-O-C-H-Y/compile-sketches@main
        with:
          platforms: |
            ${{ env.BOARD_MANAGER }}
            # ${{ env.REPOSITORY }}
            # ${{ env.GITHUB_URL }}
          fqbn: ${{ matrix.fqbn }}
          libraries: |
            # ${{ env.UNIVERSAL_LIBRARIES }}
            # ${{ matrix.additional-libraries }}
          sketch-paths: |
            # ${{ env.UNIVERSAL_SKETCHES }}
            # ${{ matrix.additional-sketches }}
          enable-deltas-report: true
          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
          enable-warnings-report: true
          #verbose: true
          cli-compile-flags: |
            - --warnings="all"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

  report-comment:
    needs: compile-sketch  # Wait for the compile job to finish to get the data for the report
    if: github.event_name == 'pull_request' # Only run the job when the workflow is triggered by a pull request
    runs-on: ubuntu-latest
    steps:
      # This step is needed to get the size data produced by the compile jobs
      - name: Download sketches reports artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

      - name: Report results
        uses: P-R-O-C-H-Y/report-size-deltas@main
        with:
          sketches-reports-source: ${{ env.SKETCHES_REPORTS_PATH }}

  report-to-file:
    needs: compile-sketch  # Wait for the compile job to finish to get the data for the report
    if: github.event_name ==  'push' #'schedule' # Only run the job when the workflow is triggered by a schedule
    runs-on: ubuntu-latest
    steps:
      # Check out repository
      - name: Checkout repository    
        uses: actions/checkout@v3

      # This step is needed to get the size data produced by the compile jobs
      - name: Download sketches reports artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_ARTIFACT_NAME }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}

      - name: Report results
        uses: P-R-O-C-H-Y/report-size-deltas@main
        with:
          sketches-reports-source: ${{ env.SKETCHES_REPORTS_PATH }}
          destination-file: ${{ env.RESULT_LIBRARY_TEST_FILE }}

      - name: Append file with action URL
        uses: DamianReeves/write-file-action@master
        with:
          path: ${{ env.RESULT_LIBRARY_TEST_FILE }}
          contents: |
            / [GitHub Action Link](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
          write-mode: append

      - name: Push to github repo
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add ${{ env.RESULT_LIBRARY_TEST_FILE }}
          git commit -m "Generated External Libraries Test Results"
          git push


# - name: "Read JSON"
#         uses: actions/github-script@v6
#         id: check-env
#         with:
#           result-encoding: string
#           script: |
#             try {
#               const fs = require('fs')
#               const jsonString = fs.readFileSync('./dir/file.json')
#               var apps = JSON.parse(jsonString)
#             } catch(err) {
#               core.error("Error while reading or parsing the JSON")
#               core.setFailed(err)
#             }